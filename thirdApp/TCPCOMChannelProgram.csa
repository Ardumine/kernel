using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Collections.Concurrent;

// Enum for request types
public enum RequestType
{
    Name,
    Version,
    CustomRequest
}

// Request and Response classes
public class Request
{
    public Guid Id { get; set; }
    public RequestType Type { get; set; }
    public byte[]? Payload { get; set; }
}

public class Response
{
    public Guid RequestId { get; set; }
    public byte[]? Payload { get; set; }
}

// Modified TCP Server
public class AFCPTCPServer
{
    private TcpListener _listener;
    private ConcurrentDictionary<TcpClient, Thread> _clientThreads = new ConcurrentDictionary<TcpClient, Thread>();

    public AFCPTCPServer(int port)
    {
        _listener = new TcpListener(IPAddress.Any, port);
    }

    public void Start()
    {
        _listener.Start();
        Thread acceptThread = new Thread(AcceptClientsAsync);
        acceptThread.Start();
    }

    private void AcceptClientsAsync()
    {
        while (true)
        {
            TcpClient client = _listener.AcceptTcpClient();
            Thread clientThread = new Thread(() => HandleClient(client));
            _clientThreads[client] = clientThread;
            clientThread.Start();
        }
    }

    private void HandleClient(TcpClient client)
    {
        NetworkStream stream = client.GetStream();

        try
        {
            while (client.Connected)
            {
                // Receive request
                Request request = ReceiveRequest(stream);

                // Process request
                Response response = ProcessRequest(request);

                // Send response
                SendResponse(stream, response);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Client disconnected: {ex.Message}");
            _clientThreads.TryRemove(client, out _);
        }
    }

    private Request ReceiveRequest(NetworkStream stream)
    {
        // Read request size
        byte[] sizeBuffer = new byte[4];
        stream.Read(sizeBuffer, 0, 4);
        int requestSize = BitConverter.ToInt32(sizeBuffer, 0);

        // Read request
        byte[] requestBuffer = new byte[requestSize];
        stream.Read(requestBuffer, 0, requestSize);

        // Deserialize request
        return DeserializeRequest(requestBuffer);
    }

    private Response ProcessRequest(Request request)
    {
        // Example request handling
        return request.Type switch
        {
            RequestType.Name => new Response 
            { 
                RequestId = request.Id, 
                Payload = Encoding.UTF8.GetBytes("ServerName") 
            },
            RequestType.Version => new Response 
            { 
                RequestId = request.Id, 
                Payload = Encoding.UTF8.GetBytes("1.0.0") 
            },
            _ => new Response 
            { 
                RequestId = request.Id, 
                Payload = Encoding.UTF8.GetBytes("Unknown Request") 
            }
        };
    }

    private void SendResponse(NetworkStream stream, Response response)
    {
        // Serialize response
        byte[] responseBuffer = SerializeResponse(response);

        // Send response size
        byte[] sizeBytes = BitConverter.GetBytes(responseBuffer.Length);
        stream.Write(sizeBytes, 0, 4);

        // Send response
        stream.Write(responseBuffer, 0, responseBuffer.Length);
    }

    // Serialization methods (simplified)
    private Request DeserializeRequest(byte[] buffer)
    {
        using (var ms = new MemoryStream(buffer))
        using (var reader = new BinaryReader(ms))
        {
            return new Request
            {
                Id = new Guid(reader.ReadBytes(16)),
                Type = (RequestType)reader.ReadInt32(),
                Payload = reader.ReadBytes(reader.ReadInt32())
            };
        }
    }

    private byte[] SerializeResponse(Response response)
    {
        using (var ms = new MemoryStream())
        using (var writer = new BinaryWriter(ms))
        {
            writer.Write(response.RequestId.ToByteArray());
            writer.Write(response.Payload.Length);
            writer.Write(response.Payload);
            return ms.ToArray();
        }
    }
}

// Modified TCP Client
public class TcpClientApp
{
    private TcpClient _client;
    private NetworkStream _stream;
    private ConcurrentDictionary<Guid, TaskCompletionSource<Response>> _pendingRequests 
        = new ConcurrentDictionary<Guid, TaskCompletionSource<Response>>();

    public TcpClientApp(string ipAddress, int port)
    {
        _client = new TcpClient(ipAddress, port);
        _stream = _client.GetStream();

        // Start receive thread
        Thread receiveThread = new Thread(ReceiveResponses);
        receiveThread.Start();
    }

    public Response Request(RequestType type, byte[] payload)
    {
        // Create request
        var request = new Request
        {
            Id = Guid.NewGuid(),
            Type = type,
            Payload = payload ?? []
        };

        // Prepare task to wait for response
        var tcs = new TaskCompletionSource<Response>();
        _pendingRequests[request.Id] = tcs;

        // Send request
        SendRequest(request);

        return tcs.Task.Result;
    }

    private void SendRequest(Request request)
    {
        // Serialize request
        byte[] requestBuffer = SerializeRequest(request);

        // Send request size
        byte[] sizeBytes = BitConverter.GetBytes(requestBuffer.Length);
        _stream.Write(sizeBytes, 0, 4);

        // Send request
        _stream.Write(requestBuffer, 0, requestBuffer.Length);
    }

    private void ReceiveResponses()
    {
        try
        {
            while (_client.Connected)
            {
                // Read response size
                byte[] sizeBuffer = new byte[4];
                _stream.Read(sizeBuffer, 0, 4);
                int responseSize = BitConverter.ToInt32(sizeBuffer, 0);

                // Read response
                byte[] responseBuffer = new byte[responseSize];
                _stream.Read(responseBuffer, 0, responseSize);

                // Deserialize response
                Response response = DeserializeResponse(responseBuffer);

                // Complete pending request
                if (_pendingRequests.TryRemove(response.RequestId, out var tcs))
                {
                    tcs.SetResult(response);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Receive error: {ex.Message}");
        }
    }

    // Serialization methods (simplified)
    private byte[] SerializeRequest(Request request)
    {
        using (var ms = new System.IO.MemoryStream())
        using (var writer = new System.IO.BinaryWriter(ms))
        {
            writer.Write(request.Id.ToByteArray());
            writer.Write((int)request.Type);
            writer.Write(request.Payload.Length);
            writer.Write(request.Payload);
            return ms.ToArray();
        }
    }

    private Response DeserializeResponse(byte[] buffer)
    {
        using (var ms = new System.IO.MemoryStream(buffer))
        using (var reader = new System.IO.BinaryReader(ms))
        {
            return new Response
            {
                RequestId = new Guid(reader.ReadBytes(16)),
                Payload = reader.ReadBytes(reader.ReadInt32())
            };
        }
    }
}

// Example Usage
class Program2
{
    static void Main(string[] args)
    {
        // Start server
        var server = new AFCPTCPServer(8000);
        server.Start();

        // Create client
        var client = new TcpClientApp("127.0.0.1", 8000);

        // Send requests
        var nameResponse = client.Request(RequestType.Name, []);
        Console.WriteLine($"Server Name: {Encoding.UTF8.GetString(nameResponse.Payload)}");

        var versionResponse = client.Request(RequestType.Version, []);
        Console.WriteLine($"Server Version: {Encoding.UTF8.GetString(versionResponse.Payload)}");

    }
}