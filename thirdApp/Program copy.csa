using System;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using Newtonsoft.Json;

// Interface for the service we'll expose
public interface ICalculatorService
{
    int Add(int a, int b);
    int Subtract(int a, int b);
}

// Concrete implementation of the service
public class CalculatorService : ICalculatorService
{
    public int Add(int a, int b)
    {
        return a + b;
    }

    public int Subtract(int a, int b)
    {
        return a - b;
    }
}

// Proxy class for remote method invocation
public class ModuleProxy<T> : System.Reflection.DispatchProxy where T : class
{
    public T Base { get; set; }
    private TcpClient _client;
    private NetworkStream _stream;


    protected override object Invoke(System.Reflection.MethodInfo targetMethod, object[] args)
    {

        // Prepare method invocation data
        var invocationData = new MethodInvocationData
        {
            MethodName = targetMethod.Name,
            Arguments = args,
            ArgumentTypes = targetMethod.GetParameters().Select(p => p.ParameterType).ToArray()
        };

        // Serialize and send method invocation data
        var jsonData = JsonConvert.SerializeObject(invocationData, new JsonSerializerSettings
        {
            TypeNameHandling = TypeNameHandling.All,
            TypeNameAssemblyFormatHandling = TypeNameAssemblyFormatHandling.Full
        });
        var dataToSend = System.Text.Encoding.UTF8.GetBytes(jsonData);

        // Prefix the message with length
        var lengthPrefix = BitConverter.GetBytes(dataToSend.Length);
        _stream.Write(lengthPrefix, 0, 4);
        _stream.Write(dataToSend, 0, dataToSend.Length);

        // Read response length
        byte[] lengthBuffer = new byte[4];
        _stream.Read(lengthBuffer, 0, 4);
        int responseLength = BitConverter.ToInt32(lengthBuffer, 0);

        // Read response
        byte[] buffer = new byte[responseLength];
        _stream.Read(buffer, 0, responseLength);
        var responseJson = System.Text.Encoding.UTF8.GetString(buffer);
        var result = JsonConvert.DeserializeObject(responseJson, new JsonSerializerSettings
        {
            TypeNameHandling = TypeNameHandling.All,
            TypeNameAssemblyFormatHandling = TypeNameAssemblyFormatHandling.Full
        });
        return Convert.ChangeType(result, targetMethod.ReturnType);
    }

    public static T CreateProxy(T baseObject, TcpClient client, NetworkStream stream)
    {
        var proxy = Create<T, ModuleProxy<T>>() as ModuleProxy<T>;
        proxy.Base = baseObject;
        proxy._client = client;
        proxy._stream = stream;
        return proxy as T;
    }
}

// Data structure for method invocation
public class MethodInvocationData
{
    public string MethodName { get; set; }
    public object[] Arguments { get; set; }
    public Type[] ArgumentTypes { get; set; }
}

// Server implementation
public class ProxyServer
{
    private TcpListener _listener;
    private object _serviceInstance;

    public ProxyServer(IPAddress address, int port, object serviceInstance)
    {
        _listener = new TcpListener(address, port);
        _serviceInstance = serviceInstance;
    }

    public void Start()
    {
        _listener.Start();
        Console.WriteLine($"Server started on {_listener.LocalEndpoint}");

        while (true)
        {
            TcpClient client = _listener.AcceptTcpClient();
            HandleClient(client);
        }
    }

    private void HandleClient(TcpClient client)
    {
        NetworkStream stream = client.GetStream();



        // Read message length
        byte[] lengthBuffer = new byte[4];
        stream.Read(lengthBuffer, 0, 4);
        int messageLength = BitConverter.ToInt32(lengthBuffer, 0);

        // Read message
        byte[] buffer = new byte[messageLength];
        stream.Read(buffer, 0, messageLength);
        var receivedJson = System.Text.Encoding.UTF8.GetString(buffer);
        var invocationData = JsonConvert.DeserializeObject<MethodInvocationData>(receivedJson, new JsonSerializerSettings
        {
            TypeNameHandling = TypeNameHandling.All,
            TypeNameAssemblyFormatHandling = TypeNameAssemblyFormatHandling.Full
        });
        // Find and invoke the method
        var method = _serviceInstance.GetType().GetMethod(invocationData.MethodName,
            invocationData.ArgumentTypes);
        for (int i = 0; i < invocationData.ArgumentTypes.Length; i++)
        {
            invocationData.Arguments[i] = Convert.ChangeType(invocationData.Arguments[i], invocationData.ArgumentTypes[i]);
        }
        var result = method.Invoke(_serviceInstance, invocationData.Arguments);

        // Send result back
        var resultJson = JsonConvert.SerializeObject(result, new JsonSerializerSettings
        {
            TypeNameHandling = TypeNameHandling.All,
            TypeNameAssemblyFormatHandling = TypeNameAssemblyFormatHandling.Full
        });
        var resultBytes = System.Text.Encoding.UTF8.GetBytes(resultJson);

        // Prefix with length
        var resultLengthPrefix = BitConverter.GetBytes(resultBytes.Length);
        stream.Write(resultLengthPrefix, 0, 4);
        stream.Write(resultBytes, 0, resultBytes.Length);



    }
}

// Client implementation
public class ProxyClient
{
    public static void Maine()
    {
        // Server details
        string serverAddress = "127.0.0.1";
        int serverPort = 8888;

        // Create TCP client
        TcpClient client = new TcpClient();
        client.Connect(serverAddress, serverPort);
        NetworkStream stream = client.GetStream();

        // Create proxy for calculator service
        ICalculatorService calculatorProxy = ModuleProxy<ICalculatorService>.CreateProxy(
            new CalculatorService(), client, stream);

        // Use the proxy
        int sum = calculatorProxy.Add(5, 3);
        int difference = calculatorProxy.Subtract(10, 4);

        Console.WriteLine($"Sum: {sum}");
        Console.WriteLine($"Difference: {difference}");

        client.Close();
    }
}

// Server startup
public class Program
{
    public static void Main()
    {
        // Start server in one thread
        var serverThread = new System.Threading.Thread(() =>
        {
            var server = new ProxyServer(
                IPAddress.Loopback,
                8888,
                new CalculatorService()
            );
            server.Start();
        });
        serverThread.Start();

        // Wait a moment for server to start
        System.Threading.Thread.Sleep(100);

        // Run client
        ProxyClient.Maine();
        System.Threading.Thread.Sleep(1000);

    }
}